import os
import platform
import json
import nmap
import subprocess
import sys


def get_os_info():
    os_info = {
        "system": platform.system(),
        "node": platform.node(),
        "release": platform.release(),
        "version": platform.version(),
        "machine": platform.machine(),
        "processor": platform.processor()
    }
    return os_info


def scan_for_vulnerabilities():
    nm = nmap.PortScanner()
    scan_result = nm.scan('127.0.0.1', arguments='-sV --script vuln')
    return scan_result


def search_exploit_db(service_name, version):
    if platform.system() == "Windows":
        print("Skipping Exploit DB search on Windows.")
        return {}
    print(f"Searching for exploits for {service_name} version {version}...")

    try:
        result = subprocess.check_output(
            ['searchsploit', f'{service_name} {version}', '--json'], universal_newlines=True)
        result_json = json.loads(result) if result else {}
        return result_json
    except subprocess.CalledProcessError as e:
        print(
            f"Error searching exploits for {service_name} version {version}: {e}")
        return {}


def extract_services_from_scan(scan_data):
    services = []
    for host in scan_data.get('scan', {}):
        for port, details in scan_data['scan'][host].get('tcp', {}).items():
            service = details.get('name')
            version = details.get('version')
            if service and version:
                services.append((service, version))
    return services


def save_results_to_json(data, file_name='scan_results_with_exploits.json'):
    with open(file_name, 'w') as f:
        json.dump(data, f, indent=4)
    print(f"Scan results with exploits saved to {file_name}")


def main():
    os_info = get_os_info()

    print("Scanning for vulnerabilities...")
    vuln_scan_result = scan_for_vulnerabilities()

    services = extract_services_from_scan(vuln_scan_result)

    exploits_found = {}
    for service_name, version in services:
        exploits = search_exploit_db(service_name, version)
        if exploits:
            exploits_found[f"{service_name} {version}"] = exploits

    result = {
        "os_info": os_info,
        "vulnerabilities": vuln_scan_result,
        "exploits": exploits_found
    }

    save_results_to_json(result)


if __name__ == "__main__":
    main()
